 Subsequence Problem:

 

void subsequence(int index,int arr[],vector<int> &ds, int n)

{

  if(index==n){

          for(auto i:ds){

              cout<<i<<" ";

          }

          cout<<endl;

          return;

      }

        ds.push_back(arr[index]);

//pick

    subsequence(index+1,arr,ds,n);

    ds.pop_back();

//not pick

    subsequence(index+1,arr,ds,n);

}

 

int main(){

    int a[]={3,2,1};

    vector<int> ds;

    subsequence(0,a,ds,3);

    return 0;

}

Output:

 

3 2 1

3 2

3 1

 3

 2 1

 2

 1

 

From <https://leetcode.com/playground/QjAHmNDr>

 

 

 

Print Subsequence equal to K

 

void subsequence(int index,vector<int>& nums,vector<int> ds,int n,int target,int sum,int count){

       

        if(index==n){

            if(sum==target){

                for(int i:ds) cout<<i<<" ";

                cout<<endl;

              

            }

            // cout<<count<<" ";

            return;

        }

       

        ds.push_back(nums[index]);

        sum += nums[index];

        subsequence(index+1,nums,ds,n,target,sum,count);

        ds.pop_back();

        sum -= nums[index];

        subsequence(index+1,nums,ds,n,target,sum,count);

       

       

    }

 

int main(){

    vector<int> nums={1,2,1};

    int count=0;

    vector<int> ds;

        int sum=0,target=2;

        int n=nums.size();

        subsequence(0,nums,ds,n,target,sum,count);

      

 

    return 0;

}

Output:

 

1 1 2

 

From <https://leetcode.com/playground/QjAHmNDr>

 
