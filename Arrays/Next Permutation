A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].

The next permutation ofan array of integers is the next lexicographically greater permutation of itsinteger. 
More formally, if all the permutations of the array are sorted in onecontainer according to their lexicographical order, 
then the next permutation of that array is the permutation that follows itin the sorted container. 
If such arrangement is not possible, the array must berearranged as the lowest possible order (i.e., sorted in ascending order).


For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.


 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]

 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100
 

From <https://leetcode.com/problems/next-permutation/>


The Solution is afour step process:Eg: {1,3,5,4,2}
Step 1: Find anyelement a[i] such that a[i]<a[i+1]  we get 1<3 ind =1 from left 
Step 2: Find anelement from right that is greater than 3 we get 4.Theidea is to get an element after the next permutation
Step 3: Replace 3with 4.Step 4: Reverse theele after 4 , so that we get the lowest order permutation.
https://leetcode.com/problems/next-permutation/discuss/13867/C%2B%2B-from-Wikipedia


void nextPermutation(vector<int>& nums) {

        int n= nums.size(),k,l;     

       

        for(k=n-2;k>=0;k--){

            if(nums[k]<nums[k+1]){              

                break;

            }          

        }       

       

        if(k<0){

            reverse(nums.begin(),nums.end()); 

            return;

        }

             

        else

        {

        for(l=n-1;l>k;l--){

            if(nums[l]>nums[k]){

                break;

            }

        }

       

        swap(nums[k],nums[l]);

        reverse(nums.begin()+k+1,nums.end());

        }

       

   

    

    }
