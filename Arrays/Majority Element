Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

 

From <https://leetcode.com/problems/majority-element/>




//The idea in this approach is to count the candidates which

//occur simultaneosuly and subt -1 from count if any other ele

//appears  also called voter algorithm

 

int majorityElement(vector<int>& nums) {

        int count=0,candidate=0;

       

        for(int n:nums){

            if(count==0) candidate=n;

            if(n==candidate) count += 1;

            else count -= 1;

        }

       

        return candidate;

    }

 

2)

 

 int majorityElement(vector<int>& nums) {

        sort(nums.begin(),nums.end());

        return nums[nums.size()/2];

       


    }

