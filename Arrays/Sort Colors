//we are using three pointers here low and mid at 0 and high at n-1 index

    //This is the Dutch National Algorithm based problem

   
   
     void sortColors(vector<int>& nums) {

       int low=0,mid=0,high=nums.size()-1;

       

        while(mid<=high){

            switch(nums[mid]){

                case 0:

                    swap(nums[low++],nums[mid++]);

                    break;

                case 1:

                    mid++;

                    break;

                case 2:

                    //we are not doing mid-- because we dont what was the ele at

                    //high if it was 2 again we should swap at n-2 as so on

                    swap(nums[mid],nums[high--]);

                    break;

            }

        }

       

    }

 

2)

 

 

 

void sortColors(vector<int>& nums) {

        int zero=0,one=0,two=0;

       

        for(int i=0;i<nums.size();i++){

            if(nums[i]==0) zero++;

            else if(nums[i]==1) one++;

            else two++;

        }

       

        int i =0 ;

       

        while(zero--){

            nums[i++]=0;

        }

       

        while(one--) nums[i++]=1;

       

        while(two--) nums[i++]=2;

    }

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 
 
  

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

 

From <https://leetcode.com/problems/sort-colors/>
