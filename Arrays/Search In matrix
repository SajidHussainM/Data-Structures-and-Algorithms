Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.



//This approach can be used for both next row start>previous row end and

//next row not greater than previous row


bool searchMatrix(vector<vector<int>>& matrix, int target) {

       

        int pos=-1;

       

        //We are starting from last position in the first row

        int i=0,j=matrix[0].size()-1,mid=0;

       

        while(i<matrix.size() && j>=0 ){

          

            if(matrix[i][j]==target){

                return true;

            }

            else if(matrix[i][j]>target){

                j--;

            }

            else if(matrix[i][j]<target)

               i++;

        }

       

        return false;

    }

 

Leetcode Solution
 

 bool searchMatrix(vector<vector<int>>& matrix, int target) {

        if(!matrix.size()) return false;

       

        int pos=-1;

        int n=matrix.size(),m=matrix[0].size();

       

        int lo=0,hi=n*m-1,mid=0;

     

       

        while(lo<=hi){

           int mid= (lo+(hi-lo)/2);

            if(matrix[mid/m][mid%m]==target){

                return true;

            }

            else if(matrix[mid/m][mid%m]>target){

                hi = mid-1;

            }

            else if(matrix[mid/m][mid%m]<target)

                lo = mid+1;

        }

       

        return false;

    }
