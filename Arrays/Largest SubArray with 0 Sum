

Wednesday, August 17, 2022

5:27 PM

/* The map is used to keep updating the values of the sum and where it is found

    at index if we find the sum in the map again it means that the rest of the

    elements add up to it so the other ele are zero */
    
    Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.

 

From <https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1>





Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.

 

From <https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1>

/* The map is used to keep updating the values of the sum and where it is found

    at index if we find the sum in the map again it means that the rest of the

    elements add up to it so the other ele are zero */

   

 

int maxLen(vector<int>&A, int n)

    {  

       int maxi=0,sum=0;

       unordered_map<int,int> mp;

      

       for(int i=0;i<n;i++){

           sum += A[i];

           if(sum==0){

               maxi = i+1;

           }

           else{

               if(mp.find(sum)!=mp.end()){

                   maxi= max(maxi,i-mp[sum]);

               }

               else{

                   mp[sum]=i;

               }

           }

       }

      

       return maxi;

    }

 

 

 
