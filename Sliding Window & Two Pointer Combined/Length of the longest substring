/*

Given a string S, find the length of the longest substring without repeating characters.


Example 1:

Input:
S = "geeksforgeeks"
Output:
7
Explanation:
Longest substring is
"eksforg".
Example 2:

Input:
S = "abdefgabef"
Output:
6
Explanation:
Longest substring are
"abdefg" , "bdefga" and "defgab".
 

Your Task:
You don't need to take input or print anything. Your task is to complete the function longestUniqueSubsttr() which takes a string S as and returns the length of the longest substring.

 

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(K) where K is constant.


Constraints:
1 ≤ |S| ≤ 105
It is guaranteed that all characters of the String S will be lowercase letters from 'a' to 'z'

*/

1)

class Solution{
    public:
    int longestUniqueSubsttr(string s){
        int len = 0,  n = s.size();
        map<char, int> mp;
        int i = 0 , j = 0;
        
        for(int k=0; k<n; k++){
            if(mp.find(s[k]) == mp.end()){
                mp[s[j]] = j;
                j++;
            }
            
            else{
                while(i <= mp[s[j]]){
                    mp.erase(s[i]);
                    i++;
                }
            
                mp[s[j]] = j;
                j++;
            }
            
            len = max(len, j - i);
            
            
        }
        
        
        return len;
        
    }
};


2) 

class Solution{
    public:
    int longestUniqueSubsttr(string s){
        int len = 0,  n = s.size();
        map<char, int> mp;
        int i = 0 , j = 0;
        
        for(int k=0; k<n; k++){
            if(mp.find(s[k]) == mp.end()){
                mp[s[j]] = j;
                j++;
            }
            
            else{
                while(i <= mp[s[j]]){
                    mp.erase(s[i]);
                    i++;
                }
            
                mp[s[j]] = j;
                j++;
            }
            
            len = max(len, j - i);
            
            
        }
        
        
        return len;
        
    }
};

