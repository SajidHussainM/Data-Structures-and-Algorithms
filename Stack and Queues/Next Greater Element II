Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.  
The next greater number of a number x is the first greater number to its traversing-order next in the array,
which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.



class Solution {
    private:
        vector<int> calc(vector<int> nums2, int n){
            vector<int> nge(n);
            stack<int> st;

            for(int i=(2*n)-1; i>=0 ; i--){
                while(!st.empty() && st.top()<=nums2[i%n]){
                    cout<<" ." ;
                    st.pop();
                }

                if(i<n){
                if(st.empty()) nge[i] = -1;
                else nge[i] = st.top();
                }

                st.push(nums2[i%n]);
                
            }

            return nge;
        }
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        vector<int> ans = calc(nums,nums.size());

        return ans;
    }
};
