/*

907. Sum of Subarray Minimums
Medium
5.7K
394
Companies
Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444
 

Constraints:

1 <= arr.length <= 3 * 104
1 <= arr[i] <= 3 * 104

*/





class Solution {
public:
    int sumSubarrayMins(vector<int>& A) {
        int n = A.size(), mod = 1e9 + 7;
        stack<int> st;
        vector<int> left(n) , right(n);
        
        st.push(0);
        left[0] = 1;

        for(int i=1; i<n; i++){
            while(!st.empty() && A[st.top()]>A[i])
                st.pop();

            if(st.empty())
                left[i] = i + 1;

            else
                left[i] = i - st.top();

            st.push(i);
        }


        while(!st.empty()) st.pop();

        st.push(n-1);
        right[n-1] = 1;

        for(int i=n-2; i>=0; i--){
            while(!st.empty() && A[st.top()] >= A[i])
                st.pop();

            if(st.empty())
                right[i] = n - i;
            else
                right[i] = st.top() - i;


            st.push(i);
        }

        int res = 0; 

        for(int i=0; i<n; i++){
            long long ans = ( left[i] * right[i]) % mod;
            ans = (ans * A[i]) % mod;
            res = (res + ans) % mod;
        }

        return res;
    }
};
